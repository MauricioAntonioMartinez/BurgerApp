{"version":3,"sources":["containers/Auth/Auth.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.css"],"names":["module","exports","Auth","state","formAuth","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","id","updatedObject","target","checkValidity","setState","switchAuthModeHandler","prevState","submitForm","preventDefault","props","onAuth","this","buildingBurger","authRedirectPath","onSetRedirectPath","arrayInputs","key","push","config","form","loading","map","formElement","elementName","invalid","shouldValidate","Changed","errorMessage","error","message","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","BurgerBuilder","building","authRedirect","dispatch","actions","withError","axios","Input","inputElement","ValidationError","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Label","label"],"mappings":"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","file":"static/js/4.4f3a9925.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"src-containers-Auth-Auth__Auth--2YUr1\"};","import React, { Component } from \"react\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.css\";\r\nimport * as actions from \"../../Store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport withError from \"../../hoc/withErrorHandler/withErrorHandler\";\r\nimport axios from \"../../axios-orders\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { updatedObject, checkValidity } from \"../../share/utility\";\r\n\r\nexport class Auth extends Component {\r\n  state = {\r\n    formAuth: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your Email\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignup: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, id) => {\r\n    const formAuth = updatedObject(this.state.formAuth, {\r\n      [id]: updatedObject(this.state.formAuth[id], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.formAuth[id].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n    this.setState({ formAuth });\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignup: !prevState.isSignup };\r\n    });\r\n  };\r\n\r\n  submitForm = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.formAuth.email.value,\r\n      this.state.formAuth.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n  render() {\r\n    const arrayInputs = [];\r\n    for (let key in this.state.formAuth) {\r\n      arrayInputs.push({ id: key, config: this.state.formAuth[key] });\r\n    }\r\n    let form = <Spinner />;\r\n    if (!this.props.loading)\r\n      form = arrayInputs.map((formElement) => {\r\n        return (\r\n          <Input\r\n            key={formElement.id}\r\n            elementName={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            Changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        );\r\n      });\r\n\r\n    let errorMessage = null;\r\n    if (this.props.error) errorMessage = <p>{this.props.error.message}</p>;\r\n\r\n    if (this.props.isAuthenticated)\r\n      return <Redirect to={this.props.authRedirectPath} />;\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {errorMessage}\r\n        <form onSubmit={this.submitForm}>\r\n          {form}\r\n          <Button btnType=\"Success\">Submit</Button>\r\n        </form>\r\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\r\n          Switch to {this.state.isSignup ? \"Sign In\" : \"Sign Up\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.BurgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirect,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetRedirectPath: () => dispatch(actions.setAuthRedirect(\"/\")),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withError(Auth, axios));\r\n","import React from \"react\";\r\nimport classes from \"./Input.css\";\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  let ValidationError = null;\r\n  const inputClasses = [classes.InputElement];\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n    ValidationError = (\r\n      <p>Please enter a(an) {props.elementName} valid value!!</p>\r\n    );\r\n  }\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.Changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.Changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.Changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => {\r\n            return (\r\n              <option key={option.value} value={option.value}>\r\n                {option.displayValue}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.Changed}\r\n        />\r\n      );\r\n  }\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {ValidationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"src-components-UI-Input-Input__Label--_n-1m\",\"InputElement\":\"src-components-UI-Input-Input__InputElement--2-aFx\",\"Invalid\":\"src-components-UI-Input-Input__Invalid--1sl1p\",\"ValidationError\":\"src-components-UI-Input-Input__ValidationError--1ElSg\"};"],"sourceRoot":""}